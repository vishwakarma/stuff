/*

Skript till Laborationen 2 UDF (User Defined Functions).

Studera och kör nedanstående skript. Du får gärna lägga till fler artiklar och order.

2015-09-08

*/

--//// Nedanstående rader kan du ha användning för om du har en egen server //////////////////
-- USE Master
--GO
-- DROP Database UDF_lab
--GO
-- CREATE Database UDF_lab
--GO
-- USE UDF_lab
--GO
--///////////////////////////////////////////
USE DV1454_adba14
DROP TABLE Article
GO
CREATE TABLE Article
(
    Nr int PRIMARY KEY,
    ArtName VARCHAR(20) NOT NULL UNIQUE,
    Price FLOAT DEFAULT 0
);


DROP TABLE CustomOrder
GO
CREATE TABLE CustomOrder
(
    Nr int PRIMARY KEY,
    CustomerName VARCHAR(30) NOT NULL UNIQUE,
    TotalPrice FLOAT DEFAULT 0
);

DROP TABLE OrderLine
GO
CREATE TABLE OrderLine
(
    ArtNr int,
    OrderNr int,
    Amount int,
    PRIMARY KEY (ArtNr, OrderNr),
    CONSTRAINT fkOrderLine_Article
    FOREIGN KEY (ArtNr) REFERENCES Article(Nr),
    CONSTRAINT fkOrderLine_CustomOrder
    FOREIGN KEY (OrderNr) REFERENCES CustomOrder(Nr)
);

---------------------------------------------------------------------------------------
-- lägg gärna till fler artiklar här
-- Insert articles
INSERT INTO Article (Nr, ArtName, Price)
VALUES (10, 'Penna', 4.50)
INSERT INTO Article (Nr, ArtName, Price)
VALUES (20, 'Radergummi', 0.50)
INSERT INTO Article (Nr, ArtName, Price)
VALUES (30, 'Kollegieblock', 15.00)
INSERT INTO Article (Nr, ArtName, Price)
VALUES (40, 'Gaffelpärm', 23.25)
INSERT INTO Article (Nr, ArtName, Price)
VALUES (50, 'Plastmapp', 2.50)

-- SELECT * FROM Article

-- Insert two orders
INSERT INTO CustomOrder (Nr, CustomerName, TotalPrice)
VALUES (1000, 'Studentbokhandeln', 0)
INSERT INTO CustomOrder (Nr, CustomerName, TotalPrice)
VALUES (1001, 'BTH', 0)

-- SELECT * FROM CustomOrder

-- Insert some ordelines
INSERT INTO OrderLine (ArtNr, OrderNr, Amount)
VALUES (10, 1000, 100)

INSERT INTO OrderLine (ArtNr, OrderNr, Amount)
VALUES (20, 1000, 200)

INSERT INTO OrderLine (ArtNr, OrderNr, Amount)
VALUES (40, 1000, 5)

INSERT INTO OrderLine (ArtNr, OrderNr, Amount)
VALUES (40, 1001, 10)

-- Update the CustomOrder table with the total amounts
UPDATE CustomOrder
SET TotalPrice = 666.25
WHERE Nr = 1000

UPDATE CustomOrder
SET TotalPrice = 232.25
WHERE Nr = 1001

SELECT * FROM Article
SELECT * FROM CustomOrder
SELECT * FROM OrderLine

---------------------------------------------------------------------------------------

 -- END --

DROP PROCEDURE CheckORDER

CREATE PROCEDURE DV1454_adba14.CheckORDER @ArticleNR INT, @OrderNr INT, @Amount INT
AS
BEGIN
  DECLARE @custOrderNr INT = (SELECT CustomOrder.Nr FROM CustomOrder);
  DECLARE @custOrderTotal FLOAT = (SELECT  CustomOrder.TotalPrice FROM CustomOrder);
  DECLARE @ArtNr INT  = (SELECT Article.Nr FROM Article);
  DECLARE @ArtPrice FLOAT = (SELECT Article.Price FROM Article);

  IF @OrderNr = @custOrderNr AND @ArticleNR = @ArtNr AND @Artprice*@Amount + @custOrderTotal < 1000
    BEGIN
      INSERT INTO OrderLine VALUES(@ArticleNR, @OrderNr, @Amount)
      RETURN 1
    END
    ELSE
    BEGIN
       RETURN -1
    END
END

/*
-- Variables
USE DV1454_adba14
DECLARE @OrderNr INT = 1;
DECLARE @Amount INT = 3;

DECLARE @test INT
EXEC @test = CheckORDER 1,2,3
SELECT @test

*/
---- START GETTING TRIGGERED
CREATE TRIGGER updateTotal ON OrderLine
AFTER INSERT
AS

  BEGIN
    DECLARE @ArtNr int = (SELECT  ArtNr FROM INSERTED)
    DECLARE @OrderNr int = (SELECT OrderNr FROM INSERTED);
    DECLARE @Amount int = (SELECT Amount FROM INSERTED);
    DECLARE @aPrice FLOAT = (SELECT Price FROM Article)
    DECLARE @orgArtNr INT = (SELECT Nr FROM Article)
    UPDATE CustomOrder SET TotalPrice = TotalPrice + @Amount*@aPrice WHERE @orgArtNr = @ArtNr AND @OrderNr = CustomOrder.Nr
  END
DROP TRIGGER updateTotal

CREATE FUNCTION fTotalOrderValue()
  RETURNS FLOAT
AS
  BEGIN
    DECLARE @totalSum FLOAT = (SELECT SUM(CustomOrder.TotalPrice) FROM CustomOrder);
    RETURN @totalSum;
  END


SELECT *FROM CustomOrder

DECLARE @@svar FLOAT;
SET @@svar = DV1454_adba14.fTotalOrderValue()
SELECT @@SVAR